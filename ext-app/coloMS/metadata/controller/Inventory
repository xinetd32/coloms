{
    "type": "class",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "views": [
            "[",
            "    'inventory.List'",
            "]"
        ],
        "stores": [
            "[",
            "    'inventory.Vendors'",
            "]"
        ],
        "refs": [
            "[",
            "\t{",
            "        ref: 'InventoryList',",
            "        selector: '[xtype=inventoryList]'",
            "    }",
            "]    "
        ],
        "designer|userClassName": "Inventory",
        "extend": "coloMS.controller.Base"
    },
    "configAlternates": {
        "views": "array",
        "stores": "array",
        "refs": "array"
    },
    "designerId": "edb77bfe-440e-4e19-a035-dfde65bef20c",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "views",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "stores",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "refs",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "implHandler": [
                    "this.listen({",
                    "    controller: {},",
                    "    component: {",
                    "        'grid[xtype=inventoryList]': {",
                    "            edit: this.save,",
                    "            canceledit: this.cancel,",
                    "            beforerender: this.loadRecords,",
                    "            itemcontextmenu: this.showContextMenu",
                    "        },",
                    "        'grid[xtype=inventoryList] button#add': {",
                    "            click: this.add",
                    "        },",
                    "        'grid[xtype=inventoryList] gridview': {",
                    "            itemadd: this.edit",
                    "        }",
                    "    },",
                    "    global: {},",
                    "    store: {},",
                    "    //proxy: {} ",
                    "});"
                ]
            },
            "designerId": "01f1e14c-4f80-41b5-b742-aba27b81b526"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showContextMenu",
                "designer|params": [
                    "view",
                    "record",
                    "item",
                    "index",
                    "e",
                    "eOpts"
                ],
                "implHandler": [
                    "var me = this;",
                    "// stop event so browser's normal right-click action doesn't continue",
                    "e.stopEvent();",
                    "// if a menu doesn't already exist, create one",
                    "if( !item.contextMenu ) {",
                    "    // add menu",
                    "    item.contextMenu = new Ext.menu.Menu({",
                    "        items: [",
                    "        {",
                    "            text: 'Edit Item',",
                    "            iconCls: 'icon_edit',",
                    "            handler: function( item, e ) {",
                    "                var grid = me.getInventoryList(),",
                    "                    plugin = grid.editingPlugin;",
                    "                // start row edit",
                    "                plugin.startEdit( record, 0 );",
                    "            }",
                    "        },",
                    "        {",
                    "            text: 'Delete Item',",
                    "            iconCls: 'icon_delete',",
                    "            handler: function( item, e ) {",
                    "                me.remove( record );",
                    "            }",
                    "        }",
                    "        ]",
                    "    })",
                    "}",
                    "// show menu relative to item which was right-clicked",
                    "//item.contextMenu.showBy( item );",
                    "item.contextMenu.showAt(e.getXY());"
                ]
            },
            "designerId": "04b76aa6-0502-458e-a34c-59d60d512804"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadRecords",
                "designer|params": [
                    "grid",
                    "eOpts"
                ],
                "implHandler": [
                    "var me = this,",
                    "    store = grid.getStore();",
                    "// clear any fliters that have been applied",
                    "store.clearFilter( true );",
                    "// load the store",
                    "store.load();"
                ]
            },
            "designerId": "a8cf6c33-cc85-4e83-bc74-60212c7d0985"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "cancel",
                "designer|params": [
                    "editor",
                    "context",
                    "eOpts"
                ],
                "implHandler": [
                    "// if the record is a phantom, remove from store and grid",
                    "if( context.record.phantom ) {",
                    "    context.store.remove( context.record );",
                    "}"
                ]
            },
            "designerId": "3ba97f6a-0219-4fbd-8a79-42e09eb79714"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "edit",
                "designer|params": [
                    "records",
                    "index",
                    "node",
                    "eOpts"
                ],
                "implHandler": [
                    "var me = this,",
                    "    grid = me.getInventoryList(),",
                    "    plugin = grid.editingPlugin;",
                    "// start edit of row",
                    "plugin.startEdit( records[ 0 ], 0 );"
                ]
            },
            "designerId": "8a37ac7d-7451-4251-96e5-15805a86ce37"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "add",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "implHandler": [
                    "var me = this,",
                    "    grid = me.getInventoryList(),",
                    "    plugin = grid.editingPlugin,",
                    "    store = grid.getStore();",
                    "// if we're already editing, don't allow new record insert",
                    "if( plugin.editing ) {",
                    "    // show error message",
                    "    Ext.Msg.alert( 'Attention', 'Please finish editing before inserting a new record' );",
                    "    return false;",
                    "}",
                    "store.insert( 0, {} );"
                ]
            },
            "designerId": "7602f1d3-9210-4098-af74-5bfd23b19d7e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "save",
                "designer|params": [
                    "editor",
                    "context",
                    "eOpts"
                ],
                "implHandler": [
                    "var me = this,",
                    "    store = context.record.store;",
                    "callbacks ={",
                    "    success: function( records, operation ) {",
                    "    },",
                    "    failure: function( records, operation ) {",
                    "        // if failure, reject changes in store",
                    "        store.rejectChanges();",
                    "    }",
                    "};",
                    "// save",
                    "store.sync(callbacks);"
                ]
            },
            "designerId": "87aee348-8e66-4f39-8182-5d43a58dce1e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "remove",
                "designer|params": [
                    "record"
                ],
                "implHandler": [
                    "var me = this,",
                    "    store = record.store;",
                    "// show confirmation before continuing",
                    "Ext.Msg.confirm( 'Attention', 'Are you sure you want to delete this item? This action cannot be undone.', function( buttonId, text, opt ) {",
                    "    if( buttonId=='yes' ) {",
                    "        store.remove( record );",
                    "        store.sync({",
                    "            /**",
                    "            * On failure, add record back to store at correct index",
                    "            * @param {Ext.data.Model[]} records",
                    "            * @param {Ext.data.Operation} operation",
                    "            */",
                    "            failure: function( records, operation ) {",
                    "                store.rejectChanges();",
                    "            }",
                    "        })",
                    "    }",
                    "})"
                ]
            },
            "designerId": "52655a5e-a994-4781-8ddf-fd695ec4d482"
        }
    ]
}