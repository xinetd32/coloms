/*
 * File: app/controller/App.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('coloMS.controller.App', {
    extend: 'coloMS.controller.Base',

    views: [
        'layout.West',
        'layout.Menu',
        'layout.North',
        'layout.South',
        'layout.Center',
        'layout.Landing'
    ],
    refs: [
        {
            ref: 'Menu',
            selector: '[xtype=layoutMenu]'
        },
        {
            ref: 'CenterRegion',
            selector: '[xtype=layoutCenter]'
        }
    ],

    init: function() {
        this.listen({
            controller: {
                '#App': {
                    tokenchange: this.dispatch
                }
            },
            component: {
                'menu[xtype=layoutMenu] menuitem': {
                    click: this.addHistory
                }
            },
            global: {},
            store: {},    
            proxy: {
                '#rest': {
                    requestcomplete: this.handleRESTResponse,
                    exeption: this.handleProxyExeption
                }     
            }
        });
    },

    addHistory: function(item, e, opts) {
        var me = this,
            token = item.itemId;
        Ext.util.History.add( token );
        me.fireEvent( 'tokenchange', token )

    },

    dispatch: function(token) {
        var me = this,
            config;
        // switch on token to determine which content to create
        switch( token ) {
            case 'staff':
            config = {
                xtype: 'panel',
                title: 'Staff',
                html: 'Some staff content'
            };
            break;
            case 'options':
            config = {
                xtype: 'panel',
                title: 'Options',
                html: 'Some options content'
            };
            break;
            case 'inventory':
            config = {
                xtype: 'panel',
                title: 'Inventory',
                html: 'Some inventory content' 
            };
            break;
            case 'inventory-vendors':
            config = {
                xtype: 'inventoryList',
                title: 'Vendors',
                store: Ext.create('coloMS.store.inventory.Vendors',{
                    pageSize: 30
                })
            };
            break;
            case 'inventory-product-types':
            config = {
                xtype: 'inventoryList',
                title: 'Product Types',
                store: Ext.create('coloMS.store.inventory.ProductTypes',{
                    pageSize: 30
                })
            };
            break;            
            default: 
            config = {
                xtype: 'layoutLanding',
            };
            break;
        }
        me.updateCenterRegion( config );
    },

    updateCenterRegion: function(config) {
        var me = this,
            center = me.getCenterRegion();

        // remove all existing content
        center.removeAll( true );
        // add new content
        center.add( config );

    },

    handleRESTResponse: function(request, success) {
        var me = this,
            rawData = request.proxy.reader.rawData;
        // in all cases, let's hide the body mask
        Ext.getBody().unmask();
        // if proxy success
        //console.log(request);
        if( success ) {
            // if operation success
            if( request.operation.wasSuccessful() ) {
                //...
            }
            // if operation failure
            else {
                // switch on operation failure type
                switch( rawData.type ) {
                    case 'validation':
                    me.showValidationMessage( rawData.data, rawData.success, rawData.message, rawData.type );
                    break;
                }
            }
        }
        // otherwise, major failure...
        else {
            // ...
        }


    },

    showValidationMessage: function(data, success, message, type) {
        var me = this,
            errorString = '<ul>';
        // looping over the errors
        for( var i in data ) {
            var error = data[ i ];
            errorString += '<li>' + '<b>' + error.field + '</b>: ' + error.message + '</li>';
            // match form field with same field name
            var fieldMatch = Ext.ComponentQuery.query( 'field[name=' + error.field + ']' );
            // match?
            if( fieldMatch.length ) {
                // add extra validaiton message to the offending field
                fieldMatch[ 0 ].markInvalid( error.message );
            }
        }
        errorString += '</ul>';
        // display error messages in modal alert
        Ext.MessageBox.show({
            title: message,
            msg: errorString,
            icon: Ext.MessageBox.ERROR,
            buttons: Ext.Msg.OK
        });


    },

    handleProxyExeption: function(proxy, response, operation, eOpts) {
        var obj = Ext.decode(response.responseText);
        console.log(obj);
        var srvErr = operation.getError();
        if(!srvErr) {
            var msg = obj.name[0];
        } else {
            msg = operation.getError().statusText;
        }    
        Ext.MessageBox.show({
            title: 'ERROR',
            msg: msg,
            icon: Ext.MessageBox.ERROR,
            buttons: Ext.Msg.OK
        });


    }

});