/*
 * File: app/view/inventory/model/List.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('coloMS.view.inventory.model.List', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.modelList',

//    height: 250,
//    width: 400,
    title: 'Manage Models',
    store: 'inventory.Models',
    iconCls: 'silk-key',
    
    requires: [
        'coloMS.ux.form.field.plugin.ClearTrigger',
        'Ext.toolbar.Spacer'
    ],
    

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: '_vendors__name',
                    text: 'Vendor',
                    flex: 1,
                    filter: {
                        type: 'string',
                        sqlField: 'vendors.name'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: '_product_types__name',
                    text: 'Type',
                    flex: 0.5,
                    filter: {
                        type: 'string',
                        sqlField: 'product_types.name'
                    }                    
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'name',
                    text: 'Name',
                    flex: 1,
                    filter: {
                        type: 'string',
                        sqlField: 'models.name'
                    }                    
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'power',
                    text: 'Power consumption',
                    flex: 0.5,
                    filter: {
                        type: 'int',
                        sqlField: 'models.power'
                    }                    
                },
                {
                    xtype: 'booleancolumn',
                    dataIndex: 'consumable',
                    text: 'Consumable',
                    flex: 0.3,
                    trueText: 'Yes',
                    falseText: 'No',                    
                    filter: {
                        type: 'boolean',
                        sqlField: 'models.consumable'
                    }                    
                },                                          
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'description',
                    text: 'Description',
                    flex: 1, 
                    filter: {
                        type: 'string',
                        sqlField: 'models.description'
                    }                    
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    
                    loader: {
                        url: 'get_controls',
                        renderer: 'component',
                        autoLoad: true,
                        params: {
                            item: me.$className
                        }                        
                    }
                },    
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'pagingtoolbar',
                            ui: 'footer',
                            //width: 360,
                            defaultButtonUI: 'default',
                            store: me.getStore(),
                            displayInfo: true
                        },
                           '->',
                       {
                            text: 'Clear Filter Data',
                            dock: 'bottom',
                            handler: function () {
                                me.filters.clearFilters();
                                me.down('#search').setValue('');
                            } 
                        }                         
                    ]
                }
            ],
            features: [{
                ftype: 'filters'
            }]
        });

        me.callParent(arguments);
    },
});