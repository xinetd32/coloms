/*
 * File: app/controller/App.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('coloMS.controller.App', {
    extend: 'coloMS.controller.Base',

    views: [
        'layout.West',
        'layout.Menu',
        'layout.North',
        'layout.South',
        'layout.Center',
        'layout.Landing'
    ],
    refs: [
        {
            ref: 'Menu',
            selector: '[xtype=layoutMenu]'
        },
        {
            ref: 'CenterRegion',
            selector: '[xtype=layoutCenter]'
        }
    ],

    init: function() {
        this.listen({
            controller: {
                '#App': {
                    tokenchange: this.dispatch
                }
            },
            component: {
                'menu[xtype=layoutMenu] menuitem': {
                    click: this.addHistory
                }
            },
            global: {},
            store: {}  
        });
    },

    addHistory: function(item, e, opts) {
        var me = this,
            token = item.itemId;
        Ext.util.History.add( token );
        me.fireEvent( 'tokenchange', token )

    },

    dispatch: function(token) {
        var me = this,
            config;
        // switch on token to determine which content to create
        switch( token ) {
            case 'staff':
            config = {
                xtype: 'panel',
                title: 'Staff',
                html: 'Some staff content'
            };
            break;
            case 'options':
            config = {
                xtype: 'panel',
                title: 'Options',
                html: 'Some options content'
            };
            break;
            case 'inventory':
            config = {
                xtype: 'panel',
                title: 'Inventory',
                html: 'Some inventory content' 
            };
            break;
            default: 
            config = {
                xtype: 'layoutLanding'
            };
            break;
        }
        me.updateCenterRegion( config );
    },

    updateCenterRegion: function(config) {
        var me = this,
            center = me.getCenterRegion();

        // remove all existing content
        center.removeAll( true );
        // add new content
        center.add( config );

    }

});